{"version":3,"sources":["webpack:///./src/pages/myapps/sample-code.js"],"names":["BodyContainer","styled","div","MyAppsSampleCodePage","React","Component","render","Object","keys","this","props","profile","length","className","title","config","siteTitle","MyAppsHeadContainer","activeCategory","location","categories","data","navCategories","to","href","currentApp","configuration","accountType","name","network","style","backgroundColor","history","push","theme","brand","propTypes","PropTypes","object","isRequired","MyAppsSampleCodePageContainer","connect","query"],"mappings":"owiBAWA,MAAMA,EAAgBC,IAAOC,IAAV,6EAAGD,CAAH,wRAqBnB,MAAME,UAA6BC,IAAMC,UACvCC,SACE,OACEC,OAAOC,KAAKC,KAAKC,MAAMC,SAASC,OAC9B,yBAAKC,UAAU,0BACf,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,8BACE,kBAACC,EAAD,KACE,kBAAC,IAAD,CACEC,eAAgB,GAChBC,SAAUV,KAAKC,MAAMS,SACrBC,WAAYX,KAAKC,MAAMW,KAAKC,iBAEhC,kBAACtB,EAAD,CAAea,UAAU,cAEvB,yBAAKA,UAAW,sBACd,yBAAKA,UAAU,qBACb,+CACA,4BACE,4BAAI,kBAAC,OAAD,CAAMU,GAAG,yBAAT,gBACJ,wBAAIV,UAAU,UAAS,uBAAGW,KAAK,KAAR,eAG3B,yBAAKX,UAAU,aACb,yBAAKA,UAAW,sBACd,yBAAKA,UAAU,gCACb,kBAAC,OAAD,CAAMU,GAAG,eAAeV,UAAU,cAAlC,iBACA,wCACA,4BACE,4BACE,+CACA,yBAAKA,UAAU,cACb,6DAGJ,4BACE,wDACA,yBAAKA,UAAU,cACb,wCAAc,IAAd,YAA4B,IAA5B,yBACqD,SAApDJ,KAAKC,MAAMe,WAAWC,cAAcC,YACjC,4DAAkClB,KAAKC,MAAMe,WAAWG,KAAxD,MACA,4DAAkCnB,KAAKC,MAAMe,WAAWG,KAAxD,MAAiE,IAAjE,aAAgFnB,KAAKC,MAAMe,WAAWC,cAAcG,QAApH,IAA8H,IAA9H,OAIR,4BACE,mDACA,yBAAKhB,UAAU,cACb,6BAAK,0BAAMiB,MAAO,CAACC,gBAAiB,WAAYlB,UAAY,uBACxD,iGAGnBJ,KAAKC,MAAMe,WAAWC,cAAcf,QAAQ,2IAc3C,gCACE,uBAAGa,KAAK,gCAAR,qEAKNf,KAAKC,MAAMsB,QAAQC,KAAK,YAKhC,MAAMhB,EAAsBhB,IAAOC,IAAV,mFAAGD,CAAH,mBACTS,GAASA,EAAMwB,MAAMC,OA6CrChC,EAAqBiC,UAAY,CAC/BX,WAAYY,IAAUC,OAAOC,WAC7B5B,QAAS0B,IAAUC,OAAOC,YAG5B,MAIMC,EAAgCC,YAJd,EAAG9B,UAASc,iBAC3B,CAAEd,UAASc,eAGkBgB,CAAyBtC,GAE/CO,aAAS,kBAAC,cAAD,CACvBgC,MAtDS,aAuDTpC,OAAQe,GAAQ,kBAACmB,EAAD,OAAmC9B,EAAnC,CAA0CW,KAAMA,KAFzC","file":"component---src-pages-myapps-sample-code-js-a9be6ab88f06ff439862.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { graphql, Link, StaticQuery } from 'gatsby'\n\nimport SiteHeader from '../../components/Layout/Header'\nimport config from '../../../data/SiteConfig'\nimport '../../layouts/css/myapps.css'\n\nconst BodyContainer = styled.div`\nbackground-color: #f9f9fa;\nheight: 100%;\nmin-height: 100vh;\n.returnLink {\n  float: right;\n  color: #8986A0;\n  margin: 30px 0 0;\n  background-color: #735ad2;\n  color: #fff;\n  border-radius: 5px;\n  padding: 10px 20px;\n  text-decoration: none;\n  float: right;\n  font-size: 14px;\n}\n.sampleInstructions h1 {\n  margin: 30px 0 40px 0;\n}\n`\n\nclass MyAppsSampleCodePage extends React.Component {\n  render () {\n    return (\n      Object.keys(this.props.profile).length\n      ? <div className='index-container myapps'>\n        <Helmet title={config.siteTitle} />\n        <main>\n          <MyAppsHeadContainer>\n            <SiteHeader\n              activeCategory={''}\n              location={this.props.location}\n              categories={this.props.data.navCategories} />\n          </MyAppsHeadContainer>\n          <BodyContainer className='appMgrBody'>\n\n            <div className={'Grid Grid--gutters'}>\n              <div className='Grid-cell sidebar'>\n                <h4>Register an app</h4>\n                <ul>\n                  <li><Link to='/myapps/startbuilding'>App Details</Link></li>\n                  <li className='active'><a href='#'>App Code</a></li>\n                </ul>\n              </div>\n              <div className='Grid-cell'>\n                <div className={'Grid Grid--gutters'}>\n                  <div className='Grid-cell sampleInstructions'>\n                    <Link to='/myapps/list' className='returnLink'>Go to My Apps</Link>\n                    <h1>App Code</h1>\n                    <ul>\n                      <li>\n                        <h3>Install Library</h3>\n                        <div className='sampleCode'>\n                          <span>npm install uport-connect</span>\n                        </div>\n                      </li>\n                      <li>\n                        <h3>Initialize uPort Connect</h3>\n                        <div className='sampleCode'>\n                          <span>import {'{'} Connect {'}'} from 'uport-connect'</span>\n                          {this.props.currentApp.configuration.accountType === 'none'\n                            ? <span>const uport = new Connect('{this.props.currentApp.name}')</span>\n                            : <span>const uport = new Connect('{this.props.currentApp.name}', {'{'}network: '{this.props.currentApp.configuration.network}'{'}'})</span>\n                          }\n                        </div>\n                      </li>\n                      <li>\n                        <h3>Request Credentials</h3>\n                        <div className='sampleCode'>\n                          <pre><code style={{backgroundColor: '#f4f4f7'}} className={`language-javascript`}>\n                            {`uport.requestDisclosure({\n  requested: ['name','country'],\n  notifications: true,\n  issc: '${this.props.currentApp.configuration.profile['/']}'\n})\nuport.onResponse('disclosureReq').then(payload => {\n  const address = payload.address\n})\n                        `}\n                          </code></pre>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <footer>\n              <a href='https://chat.uport.me/#/home'>Having trouble getting your app set up? Get in touch with us.</a>\n            </footer>\n          </BodyContainer>\n        </main>\n      </div>\n      : this.props.history.push('/myapps')\n    )\n  }\n}\n\nconst MyAppsHeadContainer = styled.div`\n  background: ${props => props.theme.brand}\n`\n\nconst query = graphql`\nquery AppManagerSnippetQuery {\n    allMarkdownRemark(\n      limit: 2000\n      filter: { frontmatter: { type: { eq: \"content\" }}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    navCategories:\n    allMarkdownRemark(\n      filter: { frontmatter: { category: { ne: null }, index: { ne: null }}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          headings {\n            value\n            depth\n          }\n          frontmatter {\n            category\n            index\n          }\n        }\n      }\n    }\n  }\n`\n\nMyAppsSampleCodePage.propTypes = {\n  currentApp: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = ({ profile, currentApp }) => {\n  return { profile, currentApp }\n}\n\nconst MyAppsSampleCodePageContainer = connect(mapStateToProps)(MyAppsSampleCodePage)\n\nexport default (props => <StaticQuery\n  query={query}\n  render={data => <MyAppsSampleCodePageContainer {...props} data={data} /> } />)\n"],"sourceRoot":""}