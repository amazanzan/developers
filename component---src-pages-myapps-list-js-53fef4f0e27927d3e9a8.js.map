{"version":3,"sources":["webpack:///./src/images/myapps-bg.svg","webpack:///./src/components/MyApps/AppList.js","webpack:///./src/pages/myapps/list.js"],"names":["module","exports","AppList","Component","constructor","props","super","this","state","bgImageStyles","componentDidMount","bgImageArray","profile","uportApps","map","app","index","configuration","profileImage","profileImageURL","backgroundImage","setState","myAppsBg","handleAppItemClick","event","clearCurrentApp","setCurrentApp","redirectToAppDetails","render","Wrapper","span","className","key","onClick","e","style","backgroundColor","accentColor","name","network","propTypes","PropTypes","object","isRequired","func","styled","div","connect","currentApp","dispatch","type","MyAppsAppListPage","React","Object","keys","length","redirectToMyApps","location","title","config","siteTitle","Main","AppManagerHeadContainer","activeCategory","categories","data","navCategories","to","theme","brand","main","MyAppsAppListPageContainer","query"],"mappings":"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","file":"component---src-pages-myapps-list-js-53fef4f0e27927d3e9a8.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/myapps-bg-0d771963a42d51e459192102dbd4f073.svg\";","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { connect } from 'react-redux'\nimport { Grid, Col } from '../../layouts/grid'\nimport myAppsBg from '../../images/myapps-bg.svg'\n\nclass AppList extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      bgImageStyles: []\n    }\n  }\n  componentDidMount () {\n    let bgImageArray = this.state.bgImageStyles\n    this.props.profile.uportApps.map((app, index) => {\n      if (app.configuration.profileImage) {\n        let profileImageURL = 'https://ipfs.io' + app.configuration.profileImage\n        bgImageArray[index] = {backgroundImage: `url(${profileImageURL})`}\n        this.setState({bgImageStyles: bgImageArray})\n        return {backgroundImage: `url(${profileImageURL})`}\n      } else {\n        return {backgroundImage: `url(${myAppsBg})`}\n      }\n    })\n  }\n  handleAppItemClick (event, index) {\n    this.props.clearCurrentApp()\n    this.props.setCurrentApp(this.props.profile.uportApps[index], index)\n    this.props.redirectToAppDetails()\n  }\n  render () {\n    const { uportApps } = this.props.profile\n    return (<Wrapper>\n      <Grid>\n        {uportApps.map((app, index) => (<Col span={4}\n          className='appItem'\n          key={index}\n          onClick={(e) => { this.handleAppItemClick(e, index) }}\n        >\n          <div className='appCover'\n            style={{backgroundColor: app.configuration.accentColor || '#5c54c7'}}\n          >&nbsp;</div>\n          <div className={'avatar ' + (app.configuration.profileImage ? 'uploaded' : 'default')}\n            style={this.state.bgImageStyles[index]}\n          >&nbsp;</div>\n          <h3>{app.name}</h3>\n          <span>{app.configuration.network}</span>\n        </Col>))}\n      </Grid>\n    </Wrapper>)\n  }\n}\n\nAppList.propTypes = {\n  profile: PropTypes.object.isRequired,\n  setCurrentApp: PropTypes.func.isRequired,\n  clearCurrentApp: PropTypes.func.isRequired\n}\n\nconst Wrapper = styled.div`\n  .appItem {\n    float: none;\n    margin: 0;\n    width: auto;\n    min-width: auto;\n  }\n`\n\nconst mapStateToProps = ({ profile, currentApp }) => {\n  return { profile, currentApp }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCurrentApp: (app, index) => dispatch({ type: `SET_CURRENT_APP`, app: app, index: index }),\n    clearCurrentApp: () => dispatch({ type: `CLEAR_CURRENT_APP` })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppList)\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { graphql, Link, StaticQuery } from 'gatsby'\n\nimport SiteHeader from '../../components/Layout/Header'\nimport Layout from \"../../components/layout\"\nimport AppList from '../../components/MyApps/AppList'\nimport { Container, Grid, Col, Spacer } from '../../layouts/grid'\nimport config from '../../../data/SiteConfig'\nimport '../../layouts/css/myapps.css'\n\nconst BodyContainer = styled.div`\nbackground-color: #f9f9fa;\nheight: 100%;\nmin-height: 100vh;\n`\n\nclass MyAppsAppListPage extends React.Component {\n  componentDidMount () {\n    if (Object.keys(this.props.profile).length === 0) {\n      this.props.redirectToMyApps()\n    }\n  }\n  render () {\n    const { redirectToAppDetails } = this.props\n    return (<Layout location={this.props.location}>\n      <div className='index-container myAppsWrap appListPage'>\n        <Helmet title={config.siteTitle} />\n        <Main>\n          <AppManagerHeadContainer>\n            <SiteHeader\n              activeCategory={''}\n              location={this.props.location}\n              categories={this.props.data.navCategories} />\n          </AppManagerHeadContainer>\n          <Container>\n            <Grid>\n              <Spacer span={1} />\n              <Col span={5}>\n                <h1>My Apps</h1>\n              </Col>\n              <Col span={5}>\n                <Link to='/myapps/configurator' className='register-button'>\n                  <span>+</span>\n                  Register an App\n                </Link>\n              </Col>\n              <Spacer span={1} />\n              <Spacer span={1} />\n              <Col span={10}>\n                <div className='appList'>\n                  {this.props.profile.uportApps\n                  ? <AppList redirectToAppDetails={redirectToAppDetails} />\n                  : null\n                  }\n                </div>\n              </Col>\n              <Spacer span={1} />\n            </Grid>\n          </Container>\n        </Main>\n      </div>\n    </Layout>)\n  }\n}\n\nconst AppManagerHeadContainer = styled.div`\n  background: ${props => props.theme.brand}\n`\nconst Main = styled.main`\n  min-height: 100vh;\n  padding-bottom: 50px;\n`\n\nconst query = graphql`\nquery AppManagerMyAppsQuery {\n    allMarkdownRemark(\n      limit: 2000\n      filter: { frontmatter: { type: { eq: \"content\" }}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    navCategories:\n    allMarkdownRemark(\n      filter: { frontmatter: { category: { ne: null }, index: { ne: null }}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          headings {\n            value\n            depth\n          }\n          frontmatter {\n            category\n            index\n          }\n        }\n      }\n    }\n  }\n`\n\nMyAppsAppListPage.propTypes = {\n  profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = ({ profile }) => {\n  return { profile }\n}\nconst mapDispatchToProps = dispatch => ({\n  redirectToMyApps() {\n    dispatch({\n      type: 'REDIRECT_MYAPPS'\n    })\n  },\n  redirectToAppDetails() {\n    dispatch({\n      type: 'REDIRECT_APP_DETAILS'\n    })\n  }\n})\n\nconst MyAppsAppListPageContainer = connect(mapStateToProps, mapDispatchToProps)(MyAppsAppListPage)\n\nexport default (props => <StaticQuery\n  query={query}\n  render={data => <MyAppsAppListPageContainer {...props} data={data} /> } />)\n"],"sourceRoot":""}